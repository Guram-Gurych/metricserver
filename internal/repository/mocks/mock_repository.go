// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricRepository is a mock of MetricRepository interface.
type MockMetricRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepositoryMockRecorder
}

// MockMetricRepositoryMockRecorder is the mock recorder for MockMetricRepository.
type MockMetricRepositoryMockRecorder struct {
	mock *MockMetricRepository
}

// NewMockMetricRepository creates a new mock instance.
func NewMockMetricRepository(ctrl *gomock.Controller) *MockMetricRepository {
	mock := &MockMetricRepository{ctrl: ctrl}
	mock.recorder = &MockMetricRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepository) EXPECT() *MockMetricRepositoryMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockMetricRepository) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockMetricRepositoryMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockMetricRepository)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockMetricRepository) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockMetricRepositoryMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockMetricRepository)(nil).GetAllGauges))
}

// GetCounter mocks base method.
func (m *MockMetricRepository) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricRepositoryMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetricRepository)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockMetricRepository) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricRepositoryMockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetricRepository)(nil).GetGauge), name)
}

// UpdateCounter mocks base method.
func (m *MockMetricRepository) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockMetricRepositoryMockRecorder) UpdateCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockMetricRepository)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockMetricRepository) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockMetricRepositoryMockRecorder) UpdateGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockMetricRepository)(nil).UpdateGauge), name, value)
}
